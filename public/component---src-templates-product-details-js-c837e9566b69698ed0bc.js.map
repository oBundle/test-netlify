{"version":3,"sources":["webpack:///./src/templates/product-details.js","webpack:///./src/components/bigcommerce/AddToCartButton.js","webpack:///./src/components/bigcommerce/ProductPrices.js"],"names":["data","allBigCommerceProducts","nodes","name","bigcommerce_id","id","sku","price","calculated_price","retail_price","sale_price","map_price","description","weight","variants","images","useState","length","url_standard","selectedImage","updateSelectedImage","product","className","style","boxShadow","backgroundColor","color","padding","src","alt","objectFit","display","cursor","justifyContent","map","img","height","width","url_thumbnail","key","JSON","stringify","onClick","productId","variantId","dangerouslySetInnerHTML","__html","query","AddToCartButton","children","value","useContext","CartContext","addToCart","addingToCart","state","data-js","type","disabled","ProductPrices","prices","PriceContext","latestProduct","currency","amount"],"mappings":"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","file":"component---src-templates-product-details-js-c837e9566b69698ed0bc.js","sourcesContent":["import React, { useState } from 'react';\nimport { graphql } from 'gatsby';\n\nimport AddToCartButton from '../components/bigcommerce/AddToCartButton';\nimport ProductPrices from '../components/bigcommerce/ProductPrices';\nimport Layout from '../components/Layout';\n\nexport default ({\n  data: {\n    allBigCommerceProducts: {\n      nodes: [\n        {\n          name,\n          id,\n          bigcommerce_id,\n          sku,\n          price,\n          calculated_price,\n          retail_price,\n          sale_price,\n          map_price,\n          description,\n          weight,\n          variants,\n          images\n        }\n      ]\n    }\n  }\n}) => {\n  const [selectedImage, updateSelectedImage] = useState(\n    images.length && images[0].url_standard\n  );\n\n  const product = {\n    price,\n    calculated_price,\n    retail_price,\n    sale_price,\n    map_price,\n    bigcommerce_id\n  };\n\n  return (\n    <Layout>\n      <div className=\"content\">\n        <div className=\"has-text-centered margin-top-0\">\n          <h1\n            className=\"has-text-weight-bold is-size-1\"\n            style={{\n              boxShadow:\n                '0.5rem 0 0 rgba(0, 0, 0, 1), -0.5rem 0 0 rgba(0, 0, 0, 1)',\n              backgroundColor: 'rgba(0, 0, 0, 1)',\n              color: 'white',\n              padding: '1rem'\n            }}>\n            {name}\n          </h1>\n        </div>\n        <section className=\"section\">\n          <div className=\"bc-product-single\">\n            <section className=\"bc-product-single__top\">\n              <div className=\"bc-product__gallery\">\n                <img\n                  src={\n                    (selectedImage && selectedImage) ||\n                    '/img/default-bc-product.png'\n                  }\n                  alt=\"Main\"\n                  style={{ objectFit: 'contain' }}\n                />\n                <div\n                  style={{\n                    display: 'flex',\n                    cursor: 'pointer',\n                    justifyContent: 'center'\n                  }}>\n                  {images.length &&\n                    images.map(img => (\n                      <img\n                        height=\"100px\"\n                        width=\"100px\"\n                        src={img.url_thumbnail}\n                        alt=\"Thumb\"\n                        key={JSON.stringify(img)}\n                        onClick={() => updateSelectedImage(img.url_standard)}\n                      />\n                    ))}\n                </div>\n              </div>\n\n              <div className=\"bc-product-single__meta\">\n                <h1 className=\"bc-product__title\">{name}</h1>\n\n                <ProductPrices product={product} />\n\n                <span className=\"bc-product__sku\">\n                  <span className=\"bc-product-single__meta-label\">SKU:</span>{' '}\n                  {sku}\n                </span>\n\n                <AddToCartButton\n                  productId={bigcommerce_id}\n                  variantId={variants[0].id}>\n                  Add to Cart\n                </AddToCartButton>\n              </div>\n            </section>\n            <section className=\"bc-single-product__description\">\n              <h4 className=\"bc-single-product__section-title\">\n                Product Description\n              </h4>\n              <div\n                className=\"bc-product__description\"\n                dangerouslySetInnerHTML={{ __html: description }}></div>\n            </section>\n            <section className=\"bc-single-product__specifications\">\n              <h4 className=\"bc-single-product__section-title\">\n                Specifications\n              </h4>\n              <ul className=\"bc-product__spec-list\">\n                <li className=\"bc-product__spec\">\n                  <span className=\"bc-product__spec-title\">Weight:</span>{' '}\n                  <span className=\"bc-product__spec-value\">{weight} oz</span>\n                </li>\n              </ul>\n            </section>\n          </div>\n        </section>\n      </div>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query($productId: String!) {\n    allBigCommerceProducts(filter: { id: { eq: $productId } }) {\n      nodes {\n        id\n        bigcommerce_id\n        name\n        sku\n        price\n        calculated_price\n        retail_price\n        sale_price\n        map_price\n        description\n        weight\n        images {\n          url_standard\n          url_thumbnail\n        }\n        variants {\n          product_id\n          id\n          sku\n        }\n      }\n    }\n  }\n`;\n","import React, { useContext } from 'react';\nimport CartContext from '../../context/CartProvider';\n\nconst AddToCartButton = ({ children, productId, variantId }) => {\n  const value = useContext(CartContext);\n  const addToCart = value && value.addToCart;\n  const addingToCart = value && value.state.addingToCart;\n\n  return (\n    <div className=\"bc-product-card\">\n      <div className=\"bc-product__actions\" data-js=\"bc-product-group-actions\">\n        <div className=\"bc-form bc-product-form\">\n          <div className=\"bc-product-form__product-message\"></div>\n          <button\n            className=\"bc-btn bc-btn--form-submit bc-btn--add_to_cart\"\n            type=\"submit\"\n            disabled={addingToCart === productId}\n            onClick={() => addToCart(productId, variantId)}>\n            {addingToCart === productId ? 'Adding to Cart' : children}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddToCartButton;\n","import React, { useContext } from 'react';\nimport CurrencyFormatter from './CurrencyFormatter';\nimport PriceContext from '../../context/PriceProvider';\n\nconst currencyCode = 'USD'; // TODO: Move this to use settings merchant sets up in BigCommerce (v2 Currencies API)\n\nconst ProductPrices = ({ product }) => {\n  const prices = useContext(PriceContext);\n  const latestProduct =\n    prices && prices[product.bigcommerce_id]\n      ? prices[product.bigcommerce_id]\n      : {\n          price: null,\n          calculated_price: null,\n          sale_price: null\n        };\n  return (\n    <div className=\"bc-product__pricing initialized\">\n      {latestProduct.sale_price !== 0 ? (\n        <p className=\"bc-product__pricing--api bc-product__pricing--visible\">\n          <span className=\"original-price-node bc-product__original-price bc-show-current-price\">\n            <CurrencyFormatter\n              currency={currencyCode}\n              amount={latestProduct.price}\n            />\n          </span>\n          <span className=\"sale-node bc-product__price bc-product__price--sale bc-show-current-price\">\n            <CurrencyFormatter\n              currency={currencyCode}\n              amount={latestProduct.calculated_price}\n            />\n          </span>\n        </p>\n      ) : (\n        <p className=\"bc-product__pricing--api bc-product__pricing--visible\">\n          <span className=\"price-node bc-product-price bc-product__price--base bc-show-current-price\">\n            <CurrencyFormatter\n              currency={currencyCode}\n              amount={latestProduct.calculated_price}\n            />\n          </span>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default ProductPrices;\n"],"sourceRoot":""}